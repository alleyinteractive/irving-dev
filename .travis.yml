# Travis CI (MIT License) configuration file for Irving dev.
# @link https://travis-ci.org/

# Tell Travis to use new container-based infrastructure
sudo: false

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

env:
  global:
    - THEME_SLUG=irving

# Specify when Travis should build.
branches:
  only:
    - production

matrix:
    fast_finish: true

    include:
        - php: '7.0'
          env: WP_VERSION=master PHP_LINT=1 WP_PHPCS=1 WP_TRAVIS_OBJECT_CACHE=1 BUILD_ASSETS=1
        - php: '7.0'
          env: WP_VERSION=4.8

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
    - |
      if [[ "$WP_TRAVIS_OBJECT_CACHE" == "1" ]]; then
        curl https://raw.githubusercontent.com/tollmanz/wordpress-pecl-memcached-object-cache/584392b56dc4adbe52bd2c7b86f875e23a3e5f75/object-cache.php > src/wp-content/object-cache.php
        echo "extension = memcached.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
      fi

    - cd $TRAVIS_BUILD_DIR/themes/$THEME_SLUG/
    # Ensure node and npm major version matches from package.json
    - nvm install "$(jq -r '.engines.node' package.json)"
    - npm i -g npm@$(jq -r '.engines.npm' package.json)

install:
    # Hop into theme's directory.
    - cd $TRAVIS_BUILD_DIR/themes/$THEME_SLUG/
    - npm install

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    - cd $TRAVIS_BUILD_DIR
    # Turn off Xdebug. See https://core.trac.wordpress.org/changeset/40138.
    - phpenv config-rm xdebug.ini || echo "Xdebug not available"

    - export PATH="$HOME/.composer/vendor/bin:$PATH"
    - |
      if [[ ${TRAVIS_PHP_VERSION:0:2} == "7." ]]; then
        composer global require "phpunit/phpunit=5.7.*"
      else
        composer global require "phpunit/phpunit=4.8.*"
      fi

    # Set up WordPress installation.
    - export WP_DEVELOP_DIR=/tmp/wordpress
    - export WP_TESTS_DIR=${WP_DEVELOP_DIR}/tests/phpunit
    - export WP_CORE_DIR=${WP_DEVELOP_DIR}/src/
    - mkdir -p $WP_DEVELOP_DIR

    # Use the Git mirror of WordPress.
    - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR

    # Set up WordPress configuration.
    - cd $WP_DEVELOP_DIR
    - echo $WP_DEVELOP_DIR
    - cp wp-tests-config-sample.php wp-tests-config.php
    - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
    - sed -i "s/yourusernamehere/root/" wp-tests-config.php
    - sed -i "s/yourpasswordhere//" wp-tests-config.php
    - echo "define( 'JETPACK_DEV_DEBUG', true );" >> wp-tests-config.php
    - cat wp-tests-config.php

    # Create WordPress database.
    - mysql -e 'CREATE DATABASE wordpress_test;' -uroot

    # Set up phpcs
    - |
      if [[ "$WP_PHPCS" == "1" ]]; then
        cd $TRAVIS_BUILD_DIR
        composer install
        export PATH=$PATH:${TRAVIS_BUILD_DIR}/vendor/bin/
        # After CodeSniffer install you should refresh your path.
        phpenv rehash
      fi

    # Set up the theme. This assumes that this repo name matches the theme name.
    - cd $TRAVIS_BUILD_DIR
    - rm -rf "${WP_CORE_DIR}wp-content"
    - mkdir -p "${WP_CORE_DIR}wp-content"
    - cp -R . "${WP_CORE_DIR}wp-content/"

    # Hop into theme's directory.
    - cd ${WP_CORE_DIR}wp-content/themes/$THEME_SLUG/

    # For debugging
    - which phpunit
    - phpunit --version
    - pwd

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors.
    #
    # Only need to run this once per PHP version.
    - if [[ "$PHP_LINT" == "1" ]]; then find . -type "f" -iname "*.php" -not -path './node_modules/*' | xargs -L "1" php -l; fi

    # WordPress Coding Standards.
    #
    # These are the same across PHP and WordPress, so we need to run them only once.
    #
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    - if [[ "$WP_PHPCS" == "1" ]]; then phpcs -p -s -v -n --extensions=php .; fi

    # Test the theme's unit tests
    - |
      if [[ "$BUILD_ASSETS" == "1" ]]; then
        phpunit
        phpunit -c multisite.xml
      fi

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false