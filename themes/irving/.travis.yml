# Travis CI (MIT License) configuration file for the Civil CMS WordPress theme
# @link https://travis-ci.org/

# Tell Travis to use new container-based infrastructure
sudo: false

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Define global theme slug
env:
  global:
    - THEME_SLUG=irving

cache:
  directories:
    - themes/$THEME_SLUG/node_modules
    - $HOME/.composer/cache

# Specify when Travis should build.
branches:
  only:
    - production

matrix:
  fast_finish: true

  include:
    - php: '7.2'
      env: NPM_BUILD=1 PHP_LINT=1 WP_PHPCS=1
    - php: '7.2'
      env: WP_VERSION=trunk
    - php: '7.2'
      env: WP_VERSION=latest WP_TRAVIS_OBJECT_CACHE=1

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  # Turn off Xdebug. See https://core.trac.wordpress.org/changeset/40138.
  - phpenv config-rm xdebug.ini || echo "Xdebug not available"

  - export PATH="$HOME/.composer/vendor/bin:$PATH"

  - export OG_DIR="$(pwd)"
  - export THEME_DIR="${OG_DIR}/themes/${THEME_SLUG}/"

  # Set up WordPress installation.
  - |
    if [[ ! -z "$WP_VERSION" ]] ; then
      # Couple the PHPUnit version to the PHP version.
      case "$TRAVIS_PHP_VERSION" in
      7.2|7.0|nightly)
        echo "Using PHPUnit 6.1"
        composer global require "phpunit/phpunit=6.1.*"
        ;;
      5.6)
        echo "Using PHPUnit 4.8"
        composer global require "phpunit/phpunit=4.8.*"
        ;;
      *)
        echo "No PHPUnit version handling for PHP version $TRAVIS_PHP_VERSION"
        exit 1
        ;;
      esac

      export WP_CORE_DIR=/tmp/wordpress/
      bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
      echo "define( 'JETPACK_DEV_DEBUG', true );" >> $WP_CORE_DIR/wp-tests-config.php

      # Set up the wp-content directory.
      cd $OG_DIR
      echo $THEME_SLUG
      rm -rf "${WP_CORE_DIR}wp-content"
      mkdir -p "${WP_CORE_DIR}wp-content"
      cp -R . "${WP_CORE_DIR}wp-content/"
      export THEME_DIR="${WP_CORE_DIR}/wp-content/themes/${THEME_SLUG}/"

      # Checkout VIP Go mu-plugins
      cd ${WP_CORE_DIR}wp-content/
      git clone --depth=50 git@github.com:Automattic/vip-mu-plugins-public.git mu-plugins

      # Kill plugins which are not very nice to phpunit
      rm -f mu-plugins/vaultpress.php mu-plugins/wordpress-importer.php mu-plugins/rewrite-rules-inspector.php

      # Maybe install memcached.
      if [[ "$WP_TRAVIS_OBJECT_CACHE" == "1" ]] ; then
        curl https://raw.githubusercontent.com/tollmanz/wordpress-pecl-memcached-object-cache/584392b56dc4adbe52bd2c7b86f875e23a3e5f75/object-cache.php > $WP_CORE_DIR/wp-content/object-cache.php
        echo "extension = memcached.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
      fi
    fi

  # Set up phpcs.
  - |
    if [[ "$WP_PHPCS" == "1" ]] ; then
      composer global require wp-coding-standards/wpcs
      phpcs --config-set installed_paths $HOME/.composer/vendor/wp-coding-standards/wpcs
    fi

  # Set up node/npm major versions from package.json
  - |
    if [[ "$NPM_BUILD" == "1" ]]; then
      cd $THEME_DIR
      nvm install "$(jq -r '.engines.node' package.json | egrep -oe "[0-9\.]+")"
      npm i -g npm@$(jq -r '.engines.npm' package.json | egrep -oe "[0-9\.]+")
      npm install --quiet
    fi

  # For debugging.
  - pwd

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Scripts for the theme.
  - cd $THEME_DIR

  # Search for PHP syntax errors.
  #
  # Only need to run this once per PHP version.
  - |
    if [[ "$PHP_LINT" == "1" ]] ; then
      find . -type "f" -iname "*.php" | xargs -L "1" php -l
    fi

  # WordPress Coding Standards.
  #
  # These are the same across PHP and WordPress, so we need to run them only once.
  #
  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
  # @link http://pear.php.net/package/PHP_CodeSniffer/
  - |
    if [[ "$WP_PHPCS" == "1" ]] ; then
      phpcs
    fi

  # Run the theme's unit tests, both in single and multisite.
  - |
    if [[ ! -z "$WP_VERSION" ]] ; then
      # Test the theme's unit tests
      phpunit
      WP_MULTISITE=1 phpunit
    fi

  # Attempt an npm production build.
  - |
    if [[ "$NPM_BUILD" == "1" ]] ; then
      npm run build
    fi


# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false
